set.seed(random_number)
fit <- AUCRF(shifter~., data = monoculture_data_slim_norm, ranking=c("MDG","MDA"), ntrees = 2000)
fitcv <- AUCRFcv(fit)
if(length(OptimalSet(fitcv)) == 3){
print(random_number)
OptimalSet(fitcv)
plot(fitcv, ylim=c(0.75, 1.05))
}
}
seed.set(42)
fit <- AUCRF(shifter~., data = monoculture_data_slim_norm, ranking=c("MDG","MDA"), ntrees = 2000)
fitcv <- AUCRFcv(fit)
OptimalSet(fitcv)
set.seed(42)
fit <- AUCRF(shifter~., data = monoculture_data_slim_norm, ranking=c("MDG","MDA"), ntrees = 2000)
fitcv <- AUCRFcv(fit)
OptimalSet(fitcv)
plot(fitcv, ylim=c(0.75, 1.05), color=c("#00BFC4"))
plot(fitcv, ylim=c(0.75, 1.05), color=c("black"))
tiff("up_aucrf_testable_known_mets_only.tiff", width = 6, height = 5, units = 'in', res = 600)
plot(fitcv, ylim=c(0.75, 1.05), color=c("black"))
dev.off()
data_meta <- monoculture_data_slim_norm
n = fitcv[["Kopt"]]
# n = 10
product_names <- fitcv[["ranking"]][1:n] %>% names() %>% as.data.frame()
colnames(product_names) <- c("ids")
info_feats <- data_meta[,c(as.character(product_names$ids),'shifter')]
info_feats_long <- gather(info_feats, product, likelihood, 1:n, factor_key = TRUE)
tiff("up_testable_known_mets_boxplot.tiff", width = 7, height = 5, units = 'in', res = 600)
theme_set(theme_bw())
ggplot(data = info_feats_long, aes(x = product, y = likelihood, color = shifter)) +
geom_boxplot(aes(x = product, y = likelihood, color = shifter), outlier.size = .25, position=position_dodge(width = 1)) +
theme(axis.text.x = element_text(angle = 55, hjust = 1)) +
scale_color_manual(labels = c("No", "Yes"), values = c("#00BFC4", "#F8766D")) +
# coord_cartesian(ylim = c(0,1)) +
labs(x = "Products", y = "Normalized Metabolite Concentration Relative to Fresh Media", title = "Shifter Products", color = "Causes Shift:")
dev.off()
info_feats <- data_meta[,c(met_keepers,'shifter')]
info_feats_long <- gather(info_feats, product, likelihood, 1:length(met_keepers), factor_key = TRUE)
pub_order <- c("Alanine","Lysine","Valine","Hypoxanthine","Urocanate", # Amino Acids and derivatives
"Acetate","Butyrate","Formate","Isovalerate","Propionate","Succinate") #SCFAs
info_feats_long$product <- factor(info_feats_long$product, levels = pub_order)
tiff("testable_known_mets_boxplot.tiff", width = 20, height = 5, units = 'in', res = 600)
theme_set(theme_bw())
ggplot(data = info_feats_long, aes(x = product, y = likelihood, color = shifter)) +
geom_boxplot(aes(x = product, y = likelihood, color = shifter), outlier.size = .25, position=position_dodge(width = 1)) +
theme(axis.text.x = element_text(angle = 55, hjust = 1)) +
scale_color_manual(labels = c("No", "Yes"), values = c("#00BFC4", "#F8766D")) +
# coord_cartesian(ylim = c(0,1)) +
labs(x = "Products", y = "Normalized Metabolite Concentration Relative to Fresh Media", title = "", color = "Causes Shift:")
dev.off()
tiff("testable_known_mets_boxplot.tiff", width = 12, height = 5, units = 'in', res = 600)
theme_set(theme_bw())
ggplot(data = info_feats_long, aes(x = product, y = likelihood, color = shifter)) +
geom_boxplot(aes(x = product, y = likelihood, color = shifter), outlier.size = .25, position=position_dodge(width = 1)) +
theme(axis.text.x = element_text(angle = 55, hjust = 1)) +
scale_color_manual(labels = c("No", "Yes"), values = c("#00BFC4", "#F8766D")) +
# coord_cartesian(ylim = c(0,1)) +
labs(x = "Products", y = "Normalized Metabolite Concentration Relative to Fresh Media", title = "", color = "Causes Shift:")
dev.off()
tiff("testable_known_mets_boxplot.tiff", width = 10, height = 5, units = 'in', res = 600)
theme_set(theme_bw())
ggplot(data = info_feats_long, aes(x = product, y = likelihood, color = shifter)) +
geom_boxplot(aes(x = product, y = likelihood, color = shifter), outlier.size = .25, position=position_dodge(width = 1)) +
theme(axis.text.x = element_text(angle = 55, hjust = 1)) +
scale_color_manual(labels = c("No", "Yes"), values = c("#00BFC4", "#F8766D")) +
# coord_cartesian(ylim = c(0,1)) +
labs(x = "Products", y = "Normalized Metabolite Concentration Relative to Fresh Media", title = "", color = "Causes Shift:")
dev.off()
plot(fitcv, ylim=c(0.75, 1.05), color=c("black"))
library(pheatmap)
library(plyr)
library(AUCRF)
library(ggplot2)
library(dplyr)
library(tidyr)
plot(fitcv, ylim=c(0.75, 1.05), color=c("black"))
df = data.frame(x = c(fitcv[["AUCcurve"]][["k"]]), y = c(fitcv[["AUCcurve"]][["AUC"]]))
theme_set(theme_bw())
p = ggplot(df, aes(x = x, y = y)) + geom_line(color = "black", size = 1.1) +
geom_point(size = 2) + geom_point(x=5, y=0.90, color = "red",size=5,alpha=0.2) +
coord_cartesian(ylim = c(0.3,1),xlim=c(1,7)) +
scale_x_continuous(breaks=seq(1,7,1)) +
annotate("text",x=5.5,y=0.78,label=paste0("cvAUC = 0.988\nOOB-AUCopt = 0.997")) +
labs(x = "Number of Features in Model", y = "OOB-AUC", title = "")
p
ggsave("up_aucrf_testable_known_mets_only.svg", p, width = 5, height = 3)
df = data.frame(x = c(fitcv[["AUCcurve"]][["k"]]), y = c(fitcv[["AUCcurve"]][["AUC"]]))
theme_set(theme_bw())
p = ggplot(df, aes(x = x, y = y)) + geom_line(color = "black", size = 1.1) +
geom_point(size = 2) + geom_point(x=3, y=0.997, color = "red",size=5,alpha=0.2) +
coord_cartesian(ylim = c(0.75,1.05),xlim=c(1,10)) +
scale_x_continuous(breaks=seq(1,7,1)) +
annotate("text",x=5.5,y=0.78,label=paste0("cvAUC = 0.988\nOOB-AUCopt = 0.997")) +
labs(x = "Number of Features in Model", y = "OOB-AUC", title = "")
p
df = data.frame(x = c(fitcv[["AUCcurve"]][["k"]]), y = c(fitcv[["AUCcurve"]][["AUC"]]))
theme_set(theme_bw())
p = ggplot(df, aes(x = x, y = y)) + geom_line(color = "black", size = 1.1) +
geom_point(size = 2) + geom_point(x=3, y=0.997, color = "red",size=5,alpha=0.2) +
coord_cartesian(ylim = c(0.75,1.05),xlim=c(1,11)) +
scale_x_continuous(breaks=seq(1,7,1)) +
annotate("text",x=5.5,y=0.78,label=paste0("cvAUC = 0.988\nOOB-AUCopt = 0.997")) +
labs(x = "Number of Features in Model", y = "OOB-AUC", title = "")
p
df = data.frame(x = c(fitcv[["AUCcurve"]][["k"]]), y = c(fitcv[["AUCcurve"]][["AUC"]]))
theme_set(theme_bw())
p = ggplot(df, aes(x = x, y = y)) + geom_line(color = "black", size = 1.1) +
geom_point(size = 2) + geom_point(x=3, y=0.997, color = "red",size=5,alpha=0.2) +
coord_cartesian(ylim = c(0.75,1.05),xlim=c(1,11)) +
scale_x_continuous(breaks=seq(1,10,1)) +
annotate("text",x=5.5,y=0.78,label=paste0("cvAUC = 0.988\nOOB-AUCopt = 0.997")) +
labs(x = "Number of Features in Model", y = "OOB-AUC", title = "")
p
p = ggplot(df, aes(x = x, y = y)) + geom_line(color = "black", size = 1.1) +
geom_point(size = 2) + geom_point(x=3, y=0.997, color = "red",size=5,alpha=0.2) +
coord_cartesian(ylim = c(0.75,1.05),xlim=c(1,11)) +
scale_x_continuous(breaks=seq(1,10,1)) +
scale_y_continuous(breaks=seq(0.75,1.05,.05))
annotate("text",x=5.5,y=0.78,label=paste0("cvAUC = 0.988\nOOB-AUCopt = 0.997")) +
labs(x = "Number of Features in Model", y = "OOB-AUC", title = "")
p
df = data.frame(x = c(fitcv[["AUCcurve"]][["k"]]), y = c(fitcv[["AUCcurve"]][["AUC"]]))
theme_set(theme_bw())
p = ggplot(df, aes(x = x, y = y)) + geom_line(color = "black", size = 1.1) +
geom_point(size = 2) + geom_point(x=3, y=0.997, color = "red",size=5,alpha=0.2) +
coord_cartesian(ylim = c(0.75,1.05),xlim=c(1,11)) +
scale_x_continuous(breaks=seq(1,11,1)) +
scale_y_continuous(breaks=seq(0.75,1.05,.05)) +
annotate("text",x=5.5,y=0.78,label=paste0("cvAUC = 0.988\nOOB-AUCopt = 0.997")) +
labs(x = "Number of Features in Model", y = "OOB-AUC", title = "")
p
p = ggplot(df, aes(x = x, y = y)) + geom_line(color = "black", size = 1.1) +
geom_point(size = 2) + geom_point(x=3, y=0.997, color = "red",size=5,alpha=0.2) +
coord_cartesian(ylim = c(0.75,1.05),xlim=c(1,11)) +
scale_x_continuous(breaks=seq(1,11,1)) +
scale_y_continuous(breaks=seq(0.75,1.05,.05)) +
annotate("text",x=5,y=0.95,label=paste0("cvAUC = 0.988\nOOB-AUCopt = 0.997")) +
labs(x = "Number of Features in Model", y = "OOB-AUC", title = "")
p
p = ggplot(df, aes(x = x, y = y)) + geom_line(color = "black", size = 1.1) +
geom_point(size = 2) + geom_point(x=3, y=0.997, color = "red",size=5,alpha=0.2) +
coord_cartesian(ylim = c(0.8,1.05),xlim=c(1,11)) +
scale_x_continuous(breaks=seq(1,11,1)) +
scale_y_continuous(breaks=seq(0.8,1.05,.05)) +
annotate("text",x=5,y=0.95,label=paste0("cvAUC = 0.988\nOOB-AUCopt = 0.997")) +
labs(x = "Number of Features in Model", y = "OOB-AUC", title = "")
p
p = ggplot(df, aes(x = x, y = y)) + geom_line(color = "black", size = 1.1) +
geom_point(size = 2) + geom_point(x=3, y=0.997, color = "red",size=5,alpha=0.2) +
coord_cartesian(ylim = c(0.8,1.05),xlim=c(1,11)) +
scale_x_continuous(breaks=seq(1,11,1)) +
scale_y_continuous(breaks=seq(0.8,1.05,.05)) +
annotate("text",x=4.5,y=0.97,label=paste0("cvAUC = 0.988\nOOB-AUCopt = 0.997")) +
labs(x = "Number of Features in Model", y = "OOB-AUC", title = "")
p
p = ggplot(df, aes(x = x, y = y)) + geom_line(color = "black", size = 1.1) +
geom_point(size = 2) + geom_point(x=3, y=0.997, color = "red",size=5,alpha=0.2) +
coord_cartesian(ylim = c(0.8,1.05),xlim=c(1,11)) +
scale_x_continuous(breaks=seq(1,11,1)) +
scale_y_continuous(breaks=seq(0.8,1.05,.05)) +
annotate("text",x=4.5,y=0.965,label=paste0("cvAUC = 0.988\nOOB-AUCopt = 0.997")) +
labs(x = "Number of Features in Model", y = "OOB-AUC", title = "")
p
p = ggplot(df, aes(x = x, y = y)) + geom_line(color = "black", size = 1.1) +
geom_point(size = 2) + geom_point(x=3, y=0.997, color = "red",size=5,alpha=0.2) +
coord_cartesian(ylim = c(0.8,1.05),xlim=c(1,11)) +
scale_x_continuous(breaks=seq(1,11,1)) +
scale_y_continuous(breaks=seq(0.8,1.05,.05)) +
annotate("text",x=4.5,y=0.964,label=paste0("cvAUC = 0.988\nOOB-AUCopt = 0.997")) +
labs(x = "Number of Features in Model", y = "OOB-AUC", title = "")
p
p = ggplot(df, aes(x = x, y = y)) + geom_line(color = "black", size = 1.1) +
geom_point(size = 2) + geom_point(x=3, y=0.997, color = "red",size=5,alpha=0.2) +
coord_cartesian(ylim = c(0.8,1.05),xlim=c(1,11)) +
scale_x_continuous(breaks=seq(1,11,1)) +
scale_y_continuous(breaks=seq(0.8,1.05,.05)) +
annotate("text",x=4.5,y=0.963,label=paste0("cvAUC = 0.988\nOOB-AUCopt = 0.997")) +
labs(x = "Number of Features in Model", y = "OOB-AUC", title = "")
p
p = ggplot(df, aes(x = x, y = y)) + geom_line(color = "black", size = 1.1) +
geom_point(size = 2) + geom_point(x=3, y=0.997, color = "red",size=5,alpha=0.2) +
coord_cartesian(ylim = c(0.8,1.05),xlim=c(1,11)) +
scale_x_continuous(breaks=seq(1,11,1)) +
scale_y_continuous(breaks=seq(0.8,1.05,.05)) +
annotate("text",x=4.3,y=0.963,label=paste0("cvAUC = 0.988\nOOB-AUCopt = 0.997")) +
labs(x = "Number of Features in Model", y = "OOB-AUC", title = "")
p
p = ggplot(df, aes(x = x, y = y)) + geom_line(color = "black", size = 1.1) +
geom_point(size = 2) + geom_point(x=3, y=0.997, color = "red",size=5,alpha=0.2) +
coord_cartesian(ylim = c(0.8,1.05),xlim=c(1,11)) +
scale_x_continuous(breaks=seq(1,11,1)) +
scale_y_continuous(breaks=seq(0.8,1.05,.05)) +
annotate("text",x=4,y=0.963,label=paste0("cvAUC = 0.988\nOOB-AUCopt = 0.997")) +
labs(x = "Number of Features in Model", y = "OOB-AUC", title = "")
p
ggsave("up_aucrf_testable_known_mets_only.svg", p, width = 5, height = 3)
df = data.frame(x = c(fitcv[["AUCcurve"]][["k"]]), y = c(fitcv[["AUCcurve"]][["AUC"]]))
theme_set(theme_bw())
p = ggplot(df, aes(x = x, y = y)) + geom_line(color = "black", size = 1.1) +
geom_point(size = 2) + geom_point(x=3, y=0.997, color = "red",size=5,alpha=0.2) +
coord_cartesian(ylim = c(0.8,1.05),xlim=c(1,11)) +
scale_x_continuous(breaks=seq(1,11,1)) +
scale_y_continuous(breaks=seq(0.8,1.05,.05)) +
annotate("text",x=4,y=0.95,label=paste0("cvAUC = 0.988\nOOB-AUCopt = 0.997")) +
labs(x = "Number of Features in Model", y = "OOB-AUC", title = "")
p
ggsave("up_aucrf_testable_known_mets_only.svg", p, width = 4, height = 3)
df = data.frame(x = c(fitcv[["AUCcurve"]][["k"]]), y = c(fitcv[["AUCcurve"]][["AUC"]]))
theme_set(theme_bw())
p = ggplot(df, aes(x = x, y = y)) + geom_line(color = "black", size = 1.1) +
geom_point(size = 2) + geom_point(x=3, y=0.997, color = "red",size=5,alpha=0.2) +
coord_cartesian(ylim = c(0.8,1.05),xlim=c(1,11)) +
scale_x_continuous(breaks=seq(1,11,1)) +
scale_y_continuous(breaks=seq(0.8,1.05,.05)) +
annotate("text",x=4.5,y=0.95,label=paste0("cvAUC = 0.988\nOOB-AUCopt = 0.997")) +
labs(x = "Number of Features in Model", y = "OOB-AUC", title = "")
p
ggsave("up_aucrf_testable_known_mets_only.svg", p, width = 4, height = 3)
# Process data to aquire only testable mets #
monoculture_data_slim_1 <- filter(monoculture_data_slim, shifter == 1)
monoculture_data_slim_1$shifter <- NULL
monoculture_data_slim_0 <- filter(monoculture_data_slim, shifter == 0)
monoculture_data_slim_0$shifter <- NULL
medians_1 <- apply(monoculture_data_slim_1, 2, function(x) median(x, na.rm=TRUE))
medians_0 <- apply(monoculture_data_slim_0, 2, function(x) median(x, na.rm=TRUE))
met_keepers <- names(medians_1)[c(medians_1>medians_0 & medians_1>0)]
monoculture_data_slim_norm = sweep(monoculture_data_slim[1:51], MARGIN = 2,
STATS = sapply(monoculture_data_slim[,1:51], function(x) max(abs(x), na.rm = TRUE)), FUN="/")
monoculture_data_slim_norm = monoculture_data_slim_norm[,met_keepers]
monoculture_data_slim_norm$shifter = monoculture_data_slim$shifter
# Boxplot of testable mets #
info_feats <- data_meta[,c(met_keepers,'shifter')]
info_feats_long <- gather(info_feats, product, likelihood, 1:length(met_keepers), factor_key = TRUE)
pub_order <- c("Alanine","Lysine","Valine","Hypoxanthine","Urocanate", # Amino Acids and derivatives
"Acetate","Butyrate","Formate","Isovalerate","Propionate","Succinate") #SCFAs
info_feats_long$product <- factor(info_feats_long$product, levels = pub_order)
theme_set(theme_bw())
ggplot(data = info_feats_long, aes(x = product, y = likelihood, color = shifter)) +
geom_boxplot(aes(x = product, y = likelihood, color = shifter), outlier.size = .25, position=position_dodge(width = 1)) +
theme(axis.text.x = element_text(angle = 55, hjust = 1)) +
scale_color_manual(labels = c("No", "Yes"), values = c("#00BFC4", "#F8766D")) +
# coord_cartesian(ylim = c(0,1)) +
labs(x = "Products", y = "Normalized Metabolite Concentration Relative to Fresh Media", title = "", color = "Causes Shift:")
# tiff("testable_known_mets_boxplot.tiff", width = 10, height = 5, units = 'in', res = 600)
theme_set(theme_bw())
p = ggplot(data = info_feats_long, aes(x = product, y = likelihood, color = shifter)) +
geom_boxplot(aes(x = product, y = likelihood, color = shifter), outlier.size = .25, position=position_dodge(width = 1)) +
theme(axis.text.x = element_text(angle = 55, hjust = 1)) +
scale_color_manual(labels = c("No", "Yes"), values = c("#00BFC4", "#F8766D")) +
# coord_cartesian(ylim = c(0,1)) +
labs(x = "Products", y = paste0("Normalized Metabolite Concentration\nRelative to Fresh Media"), title = "", color = "Causes Shift:")
# dev.off()
ggsave("testable_known_mets_boxplot.svg", p, width = 10, height = 5)
# dev.off()
ggsave("testable_known_mets_boxplot.svg", p, width = 7, height = 4)
# dev.off()
ggsave("testable_known_mets_boxplot.svg", p, width = 8, height = 4)
# Box Plot #
data_meta <- monoculture_data_slim_norm
n = fitcv[["Kopt"]]
product_names <- fitcv[["ranking"]][1:n] %>% names() %>% as.data.frame()
colnames(product_names) <- c("ids")
info_feats <- data_meta[,c(as.character(product_names$ids),'shifter')]
info_feats_long <- gather(info_feats, product, likelihood, 1:n, factor_key = TRUE)
# tiff("up_testable_known_mets_boxplot.tiff", width = 7, height = 5, units = 'in', res = 600)
theme_set(theme_bw())
ggplot(data = info_feats_long, aes(x = product, y = likelihood, color = shifter)) +
geom_boxplot(aes(x = product, y = likelihood, color = shifter), outlier.size = .25, position=position_dodge(width = 1)) +
theme(axis.text.x = element_text(angle = 55, hjust = 1)) +
scale_color_manual(labels = c("No", "Yes"), values = c("#00BFC4", "#F8766D")) +
# coord_cartesian(ylim = c(0,1)) +
labs(x = "Products", y = paste0("Normalized Metabolite Concentration\nRelative to Fresh Media"), title = "", color = "Causes Shift:")
# tiff("up_testable_known_mets_boxplot.tiff", width = 7, height = 5, units = 'in', res = 600)
theme_set(theme_bw())
p = ggplot(data = info_feats_long, aes(x = product, y = likelihood, color = shifter)) +
geom_boxplot(aes(x = product, y = likelihood, color = shifter), outlier.size = .25, position=position_dodge(width = 1)) +
theme(axis.text.x = element_text(angle = 55, hjust = 1)) +
scale_color_manual(labels = c("No", "Yes"), values = c("#00BFC4", "#F8766D")) +
# coord_cartesian(ylim = c(0,1)) +
labs(x = "Products", y = paste0("Normalized Metabolite Concentration\nRelative to Fresh Media"), title = "", color = "Causes Shift:")
# dev.off()
ggsave("up_testable_known_mets_boxplot.svg", p, width = 5, height = 4)
library(pheatmap)
library(plyr)
library(AUCRF)
library(ggplot2)
library(dplyr)
library(tidyr)
# tiff("testable_known_mets_boxplot.tiff", width = 10, height = 5, units = 'in', res = 600)
theme_set(theme_bw())
p = ggplot(data = info_feats_long, aes(x = product, y = likelihood, color = shifter)) +
geom_boxplot(aes(x = product, y = likelihood, color = shifter), outlier.size = .25, position=position_dodge(width = 1)) +
theme(axis.text.x = element_text(angle = 55, hjust = 1)) +
scale_color_manual(labels = c("No", "Yes"), values = c("#00BFC4", "#F8766D")) +
# coord_cartesian(ylim = c(0,1)) +
labs(x = "", y = paste0("Normalized Metabolite Concentration\nRelative to Fresh Media"), title = "", color = "Causes Shift:")
# dev.off()
ggsave("testable_known_mets_boxplot.svg", p, width = 8, height = 4)
# Process data to aquire only testable mets #
monoculture_data_slim_1 <- filter(monoculture_data_slim, shifter == 1)
monoculture_data_slim_1$shifter <- NULL
monoculture_data_slim_0 <- filter(monoculture_data_slim, shifter == 0)
monoculture_data_slim_0$shifter <- NULL
medians_1 <- apply(monoculture_data_slim_1, 2, function(x) median(x, na.rm=TRUE))
medians_0 <- apply(monoculture_data_slim_0, 2, function(x) median(x, na.rm=TRUE))
met_keepers <- names(medians_1)[c(medians_1>medians_0 & medians_1>0)]
monoculture_data_slim_norm = sweep(monoculture_data_slim[1:51], MARGIN = 2,
STATS = sapply(monoculture_data_slim[,1:51], function(x) max(abs(x), na.rm = TRUE)), FUN="/")
monoculture_data_slim_norm = monoculture_data_slim_norm[,met_keepers]
monoculture_data_slim_norm$shifter = monoculture_data_slim$shifter
# Boxplot of testable mets #
info_feats <- data_meta[,c(met_keepers,'shifter')]
info_feats_long <- gather(info_feats, product, likelihood, 1:length(met_keepers), factor_key = TRUE)
pub_order <- c("Alanine","Lysine","Valine","Hypoxanthine","Urocanate", # Amino Acids and derivatives
"Acetate","Butyrate","Formate","Isovalerate","Propionate","Succinate") #SCFAs
info_feats_long$product <- factor(info_feats_long$product, levels = pub_order)
# tiff("testable_known_mets_boxplot.tiff", width = 10, height = 5, units = 'in', res = 600)
theme_set(theme_bw())
p = ggplot(data = info_feats_long, aes(x = product, y = likelihood, color = shifter)) +
geom_boxplot(aes(x = product, y = likelihood, color = shifter), outlier.size = .25, position=position_dodge(width = 1)) +
theme(axis.text.x = element_text(angle = 55, hjust = 1)) +
scale_color_manual(labels = c("No", "Yes"), values = c("#00BFC4", "#F8766D")) +
# coord_cartesian(ylim = c(0,1)) +
labs(x = "", y = paste0("Normalized Metabolite Concentration\nRelative to Fresh Media"), title = "", color = "Causes Shift:")
# dev.off()
ggsave("testable_known_mets_boxplot.svg", p, width = 8, height = 4)
# Box Plot #
data_meta <- monoculture_data_slim_norm
n = fitcv[["Kopt"]]
product_names <- fitcv[["ranking"]][1:n] %>% names() %>% as.data.frame()
colnames(product_names) <- c("ids")
info_feats <- data_meta[,c(as.character(product_names$ids),'shifter')]
info_feats_long <- gather(info_feats, product, likelihood, 1:n, factor_key = TRUE)
# tiff("up_testable_known_mets_boxplot.tiff", width = 7, height = 5, units = 'in', res = 600)
theme_set(theme_bw())
p = ggplot(data = info_feats_long, aes(x = product, y = likelihood, color = shifter)) +
geom_boxplot(aes(x = product, y = likelihood, color = shifter), outlier.size = .25, position=position_dodge(width = 1)) +
theme(axis.text.x = element_text(angle = 55, hjust = 1)) +
scale_color_manual(labels = c("No", "Yes"), values = c("#00BFC4", "#F8766D")) +
# coord_cartesian(ylim = c(0,1)) +
labs(x = "", y = paste0("Normalized Metabolite Concentration\nRelative to Fresh Media"), title = "", color = "Causes Shift:")
# dev.off()
ggsave("up_testable_known_mets_boxplot.svg", p, width = 5, height = 4)
library(pheatmap)
library(plyr)
library(AUCRF)
library(ggplot2)
library(dplyr)
library(tidyr)
Samp   <- c("Ace","Ace","Ace", "Ace", "Ace", "Ace","Iso","Iso","Iso", "Iso", "Iso", "Iso","Pro","Pro","Pro","Pro", "Pro", "Pro", "Pro", "Pro")
Concen <- c("low","low","low","high","high","high","low","low","low","high","high","high","low","low","low","low","high","high","high","high")
PD     <- c(0.71, 0.058,0.056,   3.9,   3.7,   3.6,  6.2,  5.0,  5.1,   8.7,   8.1,   7.9,  3.4,  2.0,  3.2,  6.2,  13.1,  11.9,  11.5,  10.5)
shifter_df <- data.frame(Samp, Concen, PD)
View(shifter_df)
mean(c(0.71, 0.058,0.056))
mean(c(6.2,  5.0,  5.1))
mean(c(2.0,  3.2,  6.2,  13.1))
shifter_df <- data.frame(Samp, Concen, PD, low_avg)
Samp   <- c("Ace","Ace","Ace", "Ace", "Ace", "Ace","Iso","Iso","Iso", "Iso", "Iso", "Iso","Pro","Pro","Pro","Pro", "Pro", "Pro", "Pro", "Pro")
Concen <- c("low","low","low","high","high","high","low","low","low","high","high","high","low","low","low","low","high","high","high","high")
PD     <- c(0.71, 0.058,0.056,   3.9,   3.7,   3.6,  6.2,  5.0,  5.1,   8.7,   8.1,   7.9,  3.4,  2.0,  3.2,  6.2,  13.1,  11.9,  11.5,  10.5)
low_avg<- c(0.27,  0.27, 0.27,  0.27,  0.27,  0.27,  5.4,  5.4,  5.4,   5.4,   5.4,   5.4,  6.1,  6.1,  6.1,  6.1,   6.1,   6.1,   6.1,   6.1)
shifter_df <- data.frame(Samp, Concen, PD, low_avg)
shifter_df <- transform(shifter_df, norm = PD-low_avg)
mean(c(3.4,  2.0,  3.2,  6.2))
Samp   <- c("Ace","Ace","Ace", "Ace", "Ace", "Ace","Iso","Iso","Iso", "Iso", "Iso", "Iso","Pro","Pro","Pro","Pro", "Pro", "Pro", "Pro", "Pro")
Concen <- c("low","low","low","high","high","high","low","low","low","high","high","high","low","low","low","low","high","high","high","high")
PD     <- c(0.71, 0.058,0.056,   3.9,   3.7,   3.6,  6.2,  5.0,  5.1,   8.7,   8.1,   7.9,  3.4,  2.0,  3.2,  6.2,  13.1,  11.9,  11.5,  10.5)
low_avg<- c(0.27,  0.27, 0.27,  0.27,  0.27,  0.27,  5.4,  5.4,  5.4,   5.4,   5.4,   5.4,  3.7,  3.7,  3.7,  3.7,   3.7,   3.7,   3.7,   3.7)
shifter_df <- data.frame(Samp, Concen, PD, low_avg)
shifter_df <- transform(shifter_df, norm = PD-low_avg)
p_vals <- wilcox.test(norm ~ Concen, data=shifter_df) %>% .["p.value"] %>% as.numeric()
wilcox.test(norm ~ Concen, data=shifter_df)
mean(c(0.711,0.0578,0.056))
mean(c(6.17,  4.99,  5.09))
mean(c(3.36, 1.99, 3.15,  6.2))
Samp   <- c("Ace", "Ace","Ace", "Ace", "Ace", "Ace","Iso","Iso","Iso", "Iso", "Iso", "Iso","Pro","Pro","Pro","Pro", "Pro", "Pro", "Pro", "Pro")
Concen <- c("low", "low","low","high","high","high","low","low","low","high","high","high","low","low","low","low","high","high","high","high")
PD     <- c(0.711,0.0578,0.056,  3.93,  3.72,  3.61, 6.17, 4.99, 5.09,  8.72,  8.11,  7.93, 3.36, 1.99, 3.15,  6.2, 13.11, 11.94, 11.54, 10.54)
low_avg<- c(0.275, 0.275,0.275, 0.275, 0.275, 0.275, 5.42, 5.42, 5.42,  5.42,  5.42,  5.42, 3.68, 3.68, 3.68, 3.68,  3.68,  3.68,   3.68, 3.68)
shifter_df <- data.frame(Samp, Concen, PD, low_avg)
shifter_df <- transform(shifter_df, norm = PD-low_avg)
p_vals <- wilcox.test(norm ~ Concen, data=shifter_df) %>% .["p.value"] %>% as.numeric()
wilcox.test(norm ~ Concen, data=shifter_df)
p = ggplot(shifter_df, aes(x=Concen, y=norm, color=Samp)) +
geom_point(aes(color = Samp),
position = position_jitterdodge(jitter.width = NULL, jitter.height = 0,
dodge.width = 0.7),
size = 2, alpha = 0.8)
p
ggsave("concentration_dependent_stat_visual.tiff", p, width = 3, height = 5)
p = ggplot(shifter_df, aes(x=Concen, y=norm, color=Samp)) +
geom_point(aes(color = Samp),
position = position_jitterdodge(jitter.width = NULL, jitter.height = 0,
dodge.width = 0.7),
size = 2, alpha = 0.8) +
labs(x = "Concentration Class", y = "Normalized Phase Shift")
p
ggsave("concentration_dependent_stat_visual.tiff", p, width = 3, height = 5)
(0.963+0.922+0.759)/3
(2.66+1.71+2.20)/3
(6.40+7.09+9.47)/3
(6.20+8.62+8.69)/3
library(pheatmap)
library(plyr)
library(AUCRF)
library(ggplot2)
library(dplyr)
library(tidyr)
Samp   <- c("ASF492", "ASF492","ASF492","ASF492","ASF492","ASF492","ASF500","ASF500","ASF500","ASF500","ASF500", "ASF500","ASF356","ASF356","ASF356","ASF356","ASF356","ASF356","ASF519","ASF519","ASF519","ASF519","ASF519","ASF519","ASF519")
Concen <- c(   "low",    "low",   "low",  "high",  "high",  "high",   "low",   "low",   "low",  "high",  "high",   "high",   "low",   "low",   "low",  "high",  "high",  "high",   "low",   "low",   "low",  "high",  "high",  "high",  "high")
PD     <- c(   0.963,    0.922,   0.759,    3.16,    4.33,    3.37,    2.66,    1.71,    2.20,    7.50,    7.67,     8.09,    6.40,    7.09,    9.47,   11.66,   10.89,    8.38,    6.20,    8.62,    8.69,   11.08,   15.08,   17.42,   13.58)
low_avg<- c(   0.881,    0.881,   0.881,   0.881,   0.881,   0.881,    2.19,    2.19,    2.19,    2.19,    2.19,     2.19,    7.65,    7.65,    7.65,    7.65,    7.65,    7.65,    7.84,    7.84,    7.84,    7.84,    7.84,    7.84,    7.84)
shifter_df <- data.frame(Samp, Concen, PD, low_avg)
shifter_df <- transform(shifter_df, norm = PD-low_avg)
p_vals <- wilcox.test(norm ~ Concen, data=shifter_df) %>% .["p.value"] %>% as.numeric()
View(shifter_df)
Samp   <- c("ASF492", "ASF492","ASF492","ASF492","ASF492","ASF492","ASF500","ASF500","ASF500","ASF500","ASF500", "ASF500","ASF356","ASF356","ASF356","ASF356","ASF356","ASF356","ASF519","ASF519","ASF519","ASF519","ASF519","ASF519","ASF519")
Concen <- c(   "low",    "low",   "low",  "high",  "high",  "high",   "low",   "low",   "low",  "high",  "high",   "high",   "low",   "low",   "low",  "high",  "high",  "high",   "low",   "low",   "low",  "high",  "high",  "high",  "high")
PD     <- c(   0.963,    0.922,   0.759,    3.16,    4.33,    3.37,    2.66,    1.71,    2.20,    7.50,    7.67,     8.09,    6.40,    7.09,    9.47,   11.66,  10.886,    8.38,    6.20,    8.62,    8.69,  11.082,   15.08,   17.42,   13.58)
low_avg<- c(   0.881,    0.881,   0.881,   0.881,   0.881,   0.881,    2.19,    2.19,    2.19,    2.19,    2.19,     2.19,    7.65,    7.65,    7.65,    7.65,    7.65,    7.65,    7.84,    7.84,    7.84,    7.84,    7.84,    7.84,    7.84)
shifter_df <- data.frame(Samp, Concen, PD, low_avg)
shifter_df <- transform(shifter_df, norm = PD-low_avg)
p_vals <- wilcox.test(norm ~ Concen, data=shifter_df) %>% .["p.value"] %>% as.numeric()
p_val <- wilcox.test(norm ~ Concen, data=shifter_df) %>% .["p.value"] %>% as.numeric()
p = ggplot(shifter_df, aes(x=Concen, y=norm, color=Samp)) +
geom_point(aes(color = Samp),
position = position_jitterdodge(jitter.width = NULL, jitter.height = 0,
dodge.width = 0.7),
size = 2, alpha = 0.8) +
labs(x = "Concentration Class", y = "Normalized Phase Shift")
p
ggsave("concentration_dependent_stat_visual_asf.tiff", p, width = 3, height = 5)
Samp   <- c("ASF492", "ASF492","ASF492","ASF492","ASF492","ASF492","ASF500","ASF500","ASF500","ASF500","ASF500", "ASF500","ASF356","ASF356","ASF356","ASF356","ASF356","ASF356","ASF519","ASF519","ASF519","ASF519","ASF519","ASF519","ASF519")
Concen <- c(   "low",    "low",   "low",  "high",  "high",  "high",   "low",   "low",   "low",  "high",  "high",   "high",   "low",   "low",   "low",  "high",  "high",  "high",   "low",   "low",   "low",  "high",  "high",  "high",  "high")
PD     <- c(   0.963,    0.922,   0.759,    3.16,    4.33,    3.37,    2.66,    1.71,    2.20,    7.50,    7.67,     8.09,    6.40,    7.09,    9.47,   11.66,  10.886,    8.38,    6.20,    8.62,    8.69,  11.082,   15.08,   17.42,   13.58)
low_avg<- c(   0.881,    0.881,   0.881,   0.881,   0.881,   0.881,    2.19,    2.19,    2.19,    2.19,    2.19,     2.19,    7.65,    7.65,    7.65,    7.65,    7.65,    7.65,    7.84,    7.84,    7.84,    7.84,    7.84,    7.84,    7.84)
shifter_df <- data.frame(Samp, Concen, PD, low_avg)
shifter_df <- transform(shifter_df, norm = PD-low_avg)
p_val <- wilcox.test(norm ~ Concen, data=shifter_df) %>% .["p.value"] %>% as.numeric()
p = ggplot(shifter_df, aes(x=Concen, y=norm, color=Samp)) +
geom_point(aes(color = Samp),
position = position_jitterdodge(jitter.width = NULL, jitter.height = 0,
dodge.width = 0.7),
size = 2, alpha = 0.8) +
labs(x = "Concentration Class", y = "Normalized Phase Shift")
p
ggsave("concentration_dependent_stat_visual_asf.tiff", p, width = 3, height = 5)
write.csv(shifter_df,"concentration_dependent_stat_visual_asf.csv")
p_val
Samp   <- c("Ace", "Ace","Ace", "Ace", "Ace", "Ace","Iso","Iso","Iso", "Iso", "Iso", "Iso","Pro","Pro","Pro","Pro", "Pro", "Pro", "Pro", "Pro")
Concen <- c("low", "low","low","high","high","high","low","low","low","high","high","high","low","low","low","low","high","high","high","high")
PD     <- c(0.711,0.0578,0.056,  3.93,  3.72,  3.61, 6.17, 4.99, 5.09,  8.72,  8.11,  7.93, 3.36, 1.99, 3.15,  6.2, 13.11, 11.94, 11.54, 10.54)
low_avg<- c(0.275, 0.275,0.275, 0.275, 0.275, 0.275, 5.42, 5.42, 5.42,  5.42,  5.42,  5.42, 3.68, 3.68, 3.68, 3.68,  3.68,  3.68,   3.68, 3.68)
shifter_df <- data.frame(Samp, Concen, PD, low_avg)
shifter_df <- transform(shifter_df, norm = PD-low_avg)
p_val <- wilcox.test(norm ~ Concen, data=shifter_df) %>% .["p.value"] %>% as.numeric()
p = ggplot(shifter_df, aes(x=Concen, y=norm, color=Samp)) +
geom_point(aes(color = Samp),
position = position_jitterdodge(jitter.width = NULL, jitter.height = 0,
dodge.width = 0.7),
size = 2, alpha = 0.8) +
labs(x = "Concentration Class", y = "Normalized Phase Shift")
p
ggsave("concentration_dependent_stat_visual_mets.tiff", p, width = 3, height = 5)
write.csv(shifter_df,"concentration_dependent_stat_visual_mets.csv")
p_val
#### Libraries ####
library(rJava)
library('quantmod')
library(dplyr)
library('readxl')
library(tidyr)
# library(lazyeval)
library(ggplot2)
# library(ggthemes)
library("xlsx")
source("Functions_Circadian_rhythms.R")
WRITE_DATA_FILES("Data/20170918 ent per2 scfa.xlsx", c(1,2,3,4,5,6,7,8), 13, 72,
"Data/20170918 ent per2 scfa_ALL_DATA.xlsx",
"Data/20170918 ent per2 scfa_ALL_PRT_DATA.xlsx.xlsx",
"Data/20170918 ent per2 scfa_ALL_PHASE_DATA.xlsx",
"Data/20170918 ent per2 scfa_ALL_PRT_DATA_CORRECTED.xlsx")
WRITE_DATA_FILES("/Data/20180820 ent per2 asf 492 500 502 originial KRONOS data.xlsx", c(1,2,3,4,5,6,7), 13, 72,
"/Data/20180820 ent per2 asf 492 500 502 originial KRONOS data_ALL_DATA.xlsx",
"/Data/20180820 ent per2 asf 492 500 502 originial KRONOS data_ALL_PRT_DATA.xlsx.xlsx",
"/Data/20180820 ent per2 asf 492 500 502 originial KRONOS data_ALL_PHASE_DATA.xlsx",
"/Data/20180820 ent per2 asf 492 500 502 originial KRONOS data_ALL_PRT_DATA_CORRECTED.xlsx")
WRITE_DATA_FILES("Data/20180820 ent per2 asf 492 500 502 originial KRONOS data.xlsx", c(1,2,3,4,5,6,7), 13, 72,
"Data/20180820 ent per2 asf 492 500 502 originial KRONOS data_ALL_DATA.xlsx",
"Data/20180820 ent per2 asf 492 500 502 originial KRONOS data_ALL_PRT_DATA.xlsx.xlsx",
"Data/20180820 ent per2 asf 492 500 502 originial KRONOS data_ALL_PHASE_DATA.xlsx",
"Data/20180820 ent per2 asf 492 500 502 originial KRONOS data_ALL_PRT_DATA_CORRECTED.xlsx")
WRITE_DATA_FILES("Data\20180820 ent per2 asf 492 500 502 originial KRONOS data.xlsx", c(1,2,3,4,5,6,7), 13, 72,
"Data\20180820 ent per2 asf 492 500 502 originial KRONOS data_ALL_DATA.xlsx",
"Data\20180820 ent per2 asf 492 500 502 originial KRONOS data_ALL_PRT_DATA.xlsx.xlsx",
"Data\20180820 ent per2 asf 492 500 502 originial KRONOS data_ALL_PHASE_DATA.xlsx",
"Data\20180820 ent per2 asf 492 500 502 originial KRONOS data_ALL_PRT_DATA_CORRECTED.xlsx")
getwd()
list.files()
WRITE_DATA_FILES("Data/20180820 ent per2 asf 492 500 502 original KRONOS data.xlsx", c(1,2,3,4,5,6,7), 13, 72,
"Data/20180820 ent per2 asf 492 500 502 original KRONOS data_ALL_DATA.xlsx",
"Data/20180820 ent per2 asf 492 500 502 original KRONOS data_ALL_PRT_DATA.xlsx.xlsx",
"Data/20180820 ent per2 asf 492 500 502 original KRONOS data_ALL_PHASE_DATA.xlsx",
"Data/20180820 ent per2 asf 492 500 502 original KRONOS data_ALL_PRT_DATA_CORRECTED.xlsx")
WRITE_DATA_FILES("Data/20180820 ent per2 asf 492 500 502 original KRONOS data.xlsx", c(1,2,3,4,5,6,7), 13, 72,
"Data/20180820 ent per2 asf 492 500 502 original KRONOS data_ALL_DATA.xlsx",
"Data/20180820 ent per2 asf 492 500 502 original KRONOS data_ALL_PRT_DATA.xlsx.xlsx",
"Data/20180820 ent per2 asf 492 500 502 original KRONOS data_ALL_PHASE_DATA.xlsx",
"Data/20180820 ent per2 asf 492 500 502 original KRONOS data_ALL_PRT_DATA_CORRECTED.xlsx")
